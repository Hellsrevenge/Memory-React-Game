{"version":3,"sources":["Components/GameCard/index.js","Components/Wrapper/index.js","Components/ScoreBar/index.js","App.js","serviceWorker.js","index.js"],"names":["GameCard","props","react_default","a","createElement","className","concat","animate","onClick","gifClicked","id","alt","name","src","image","Wrapper","children","ScoreBar","style","width","this","message","highscore","score","height","display","Component","App","state","gifs","gifAnimate","mixGif","console","log","shuffled","_this","sort","Math","random","setState","guessedCorrect","newInfo","map","gif","clicked","max","_this2","Components_Wrapper","Components_ScoreBar","Components_GameCard","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f9c4234.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction GameCard(props) {\n    return (\n        <div className={`card ${props.animate}`} onClick={() => props.gifClicked(props.id)}>\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} />\n            </div>\n        </div>\n    );\n}\nexport default GameCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\n\nclass ScoreBar extends Component {\n    render() {\n        return (\n            <div style={{width:\"100%\"}}>\n            <nav className=\"navbar navbar-default navbar-fixed-top\">\n                <div className=\"itemLeft\">Test Your Memory</div>\n                <div className={`itemCenter ${this.props.animate}`}>{this.props.message}</div>\n\n                <div className=\"scores\">\n                    <div className=\"high-score\">\n                        <div className=\"score-head\">TOP SCORE</div>\n                        <div className=\"score-value\">{this.props.highscore}</div>\n                    </div>\n                    <div className=\"score\">\n                        <div className=\"score-head\">SCORE</div>\n                        <div className=\"score-value\">{this.props.score}</div>\n                    </div>\n                </div>\n            </nav>\n                <div style={{height: \"105px\",display: \"block\",width: \"100%\"}}></div>\n            </div>\n        );\n    }\n}\n\nexport default ScoreBar;\n","import React, { Component } from 'react';\nimport './App.css';\nimport GameCard from \"./Components/GameCard\";\nimport Wrapper from \"./Components/Wrapper\";\nimport ScoreBar from \"./Components/ScoreBar\";\nimport gifs from \"./gifs.json\";\n\nclass App extends Component {\n        state = {\n            message: \"Click on gif to begin and try not to click on the same gif twice!\",\n            gifs,\n            score: 0,\n            highscore: 0,\n            animate: \"\",\n            gifAnimate:\"\"\n        };\n\n  componentDidMount() {\n      this.mixGif()\n  }\n\n    mixGif = id => {\n        console.log(\"text\");\n        let shuffled = this.state.gifs.sort(() => Math.random() - 0.5);\n        this.setState({gifs: shuffled });\n        return true;\n    };\n\n    gifClicked = id => {\n        let guessedCorrect = false;\n        let newInfo = this.state.gifs.map(gif => {\n            if (gif.id === id) {\n                if (!gif.clicked) {\n                    gif.clicked = true;\n                    guessedCorrect = true;\n                }\n            }\n            return gif;\n        });\n\n        if (guessedCorrect) {\n            this.setState({score: this.state.score+1, gifAnimate:\"\",message: \"You guessed correctly!\", animate:\"animated pulse\"});\n        } else {\n            newInfo = this.state.gifs.map(gif => {\n                gif.clicked = false;\n                return gif;\n            });\n            this.setState({score: 0, gifAnimate:\"animated jello\",gifs: newInfo, message: \"You guessed incorrectly!\", animate:\"animated wobble\", highscore: Math.max(this.state.score, this.state.highscore)});\n        }\n        this.setState({gifs: newInfo});\n        this.mixGif(id);\n        return true;\n    };\n\n    render() {\n        return (\n            <Wrapper>\n                <ScoreBar message={this.state.message} animate={this.state.animate} score={this.state.score} highscore={this.state.highscore}/>\n                {this.state.gifs.map(gif => (\n                    <GameCard\n                        gifClicked={this.gifClicked}\n                        id={gif.id}\n                        key={gif.id}\n                        image={gif.image}\n                        animate={this.state.gifAnimate}\n                    />\n                ))}\n            </Wrapper>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}